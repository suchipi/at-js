#!/usr/bin/env node
const clefairy = require("clefairy");
const readStdin = require("../lib/read-stdin");
const runExpression = require("../lib/run-expression");
const printHelp = require("../lib/print-help");
const parseJson = require("../lib/parse-json");

clefairy.run(
  { help: clefairy.optionalBoolean, h: clefairy.optionalBoolean },
  async (options, ...args) => {
    if (options.help || options.h) {
      printHelp(
        "map a JSON array into another JSON array, using a function",
        `
          Reads stdin as a JSON array, then calls its .map method, passing in the
          function you pass as the first argument. The return value of .map is
          then passed through JSON.stringify and printed to stdout.
        `,
        `
          echo '[1, 2, 3]' | @BINARY_NAME@ 'num => num * 2'
          echo '[{name: "Bob"}, {name: "Joe"}]' | @BINARY_NAME@ Object.keys

          echo '["one", "two"]' | @BINARY_NAME@ '.charCodeAt(0)'

          # You can use \`exec\` to run a command in a subshell and return its output:
          echo '["src", "dist"]' | @BINARY_NAME@ 'item => exec(\`ls \${item}\`.split("\\n"))'
        `
      );
    }

    const stdinStr = await readStdin();

    const items = parseJson.array(stdinStr);

    const mapperFunction = runExpression(args[0]);
    const newItems = items.map(mapperFunction);

    console.log(JSON.stringify(newItems, null, 2));
  }
);

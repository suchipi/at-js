#!/usr/bin/env node
const util = require("util");
const clefairy = require("clefairy");
const kleur = require("kleur");
const JSON5 = require("json5");
const readStdin = require("../lib/read-stdin");
const runExpression = require("../lib/run-expression");
const { printHelp, printTutorial } = require("../lib/print-help");
const targeting = require("../lib/targeting");
const json = require("../lib/json");

clefairy.run(
  {
    help: clefairy.optionalBoolean,
    h: clefairy.optionalBoolean,

    tutorial: clefairy.optionalBoolean,

    target: clefairy.optionalString,
    t: clefairy.optionalString,

    // Inspect options
    depth: clefairy.optionalNumber,
    colors: clefairy.optionalBoolean,
    maxArrayLength: clefairy.optionalNumber,
    maxStringLength: clefairy.optionalNumber,
  },
  async (options, ...args) => {
    if (options.help || options.h) {
      printHelp();
      process.exit(0);
    }

    if (options.tutorial) {
      printTutorial();
      process.exit(0);
    }

    kleur.enabled = true;

    const stdin = await readStdin();
    const code = args.join(" ").trim();

    const result = getResult(stdin, code);
    printResult(result);

    function getResult(stdin, code) {
      if (stdin == null && code != "") {
        return runExpression(code);
      } else if (stdin != null && code != "") {
        let parsedStdin = stdin;
        try {
          parsedStdin = JSON5.parse(stdin);
        } catch (err) {
          // ignored
        }

        const arg = runExpression(code);
        if (typeof arg !== "function") {
          const error = new Error(
            `When '@' is piped into, its positional command-line argument should be a JavaScript expression that evaluates to a function. That's because stdin will be passed into that function. However, your expression resulted in a value of type '${
              arg === null ? "null" : typeof arg
            }' instead.`
          );
          error.expressionResult = arg;
          throw error;
        }

        return targeting.applyToTarget(
          parsedStdin,
          options.target || options.t || "",
          arg
        );
      } else if (stdin != null && code == "") {
        let parsedStdin = stdin;
        try {
          parsedStdin = JSON5.parse(stdin);
        } catch (err) {
          // ignored
        }

        return parsedStdin;
      } else {
        throw new Error(
          "'@' is not sure what to do; please pass something into stdin and/or call '@' with some command-line arguments. Run '@ --help' for more info."
        );
      }
    }

    function printResult(result) {
      if (typeof result === "function") {
        const highlight = require("@babel/highlight").default;

        console.log(inspect(result) + "\n" + highlight(result.toString()));
      } else if (typeof result === "string" || result instanceof String) {
        process.stdout.write(result.toString());
      } else if (json.isRepresentableAsJSON(result)) {
        console.log(JSON.stringify(result, null, 2));
      } else {
        console.log(inspect(result));
      }
    }

    function inspect(value) {
      return util.inspect(value, {
        colors: options.colors === undefined ? true : options.colors,
        depth: options.depth === undefined ? 2 : options.depth,
        maxStringLength:
          options.maxStringLength === undefined
            ? 10000
            : options.maxStringLength,
        maxArrayLength:
          options.maxArrayLength === undefined ? 100 : options.maxArrayLength,
      });
    }
  }
);

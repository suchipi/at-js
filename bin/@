#!/usr/bin/env node
const clefairy = require("clefairy");
const readStdin = require("../lib/read-stdin");
const runExpression = require("../lib/run-expression");
const printHelp = require("../lib/print-help");

clefairy.run(
  { help: clefairy.optionalBoolean, h: clefairy.optionalBoolean },
  async (options, ...args) => {
    if (options.help || options.h) {
      printHelp(
        "pass stdin through a JavaScript function",
        `
          Reads stdin, passes it into a JavaScript function (which you specify as the
          first argument to @BINARY_NAME@, as a string), and prints the result to stdout.

          If stdin is parseable as JSON, it will be parsed before being passed to
          your function. Otherwise, a string will be passed to your function.

          If your function returns a string, it will be written to stdout verbatim.
          Otherwise, the return value will be passed through JSON.stringify before
          being written to stdout.
        `,
        `
          echo '[ "one", "two" ]' | @BINARY_NAME@ 'array => array.map(item => item.toUpperCase())'
          echo "hi there" | @BINARY_NAME@ 'str => str.replace(/hi/, "hello")'

          cat myFile.json | @BINARY_NAME@ Object.entries
          cat myFile.json | @BINARY_NAME@ Object.keys
        `
      );
    }

    const stdinStr = await readStdin();

    let value = stdinStr;
    try {
      value = JSON.parse(stdinStr);
    } catch (err) {
      // ignored
    }

    const arg = runExpression(args.join(" "));

    let result;
    if (typeof arg === "function") {
      result = arg(value);
    } else {
      result = arg;
    }

    if (result != null) {
      let output = result;
      if (typeof result !== "string") {
        output = JSON.stringify(result, null, 2) + "\n";
      }

      process.stdout.write(output);
    }
  }
);
